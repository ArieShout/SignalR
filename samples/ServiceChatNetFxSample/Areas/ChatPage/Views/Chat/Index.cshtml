@{
    ViewBag.Title = "ASP.NET Chat Page";
}
<link type="text/css" href="~/Areas/ChatPage/ChatPage.css" rel="stylesheet" />
<header class="help-page" style="margin-top: 60px;">
    <div class="content-wrapper">
        <div class="text-center">
            <h1>@ViewBag.Title</h1>
        </div>
    </div>
</header>
<div class="container" style="height: calc(100% - 220px);">
    <div id="messages" style="background-color: whitesmoke; "></div>
    <div style="width: 100%; border-left-style: ridge; border-right-style: ridge;">
        <textarea id="message"
                  style="width: 100%; padding: 5px 10px; border-style: hidden;"
                  placeholder="Type message and press Enter to send..."></textarea>
    </div>
    <div style="overflow: auto; border-style: ridge; border-top-style: hidden;">
        <button class="btn-warning pull-right" id="echo">Echo</button>
        <button class="btn-success pull-right" id="sendmessage">Send</button>
    </div>
</div>

<!--Reference the SignalR library. -->
<script>
    if (typeof Promise === 'undefined') {
        document.write('<script type="text/javascript" src="scripts/signalr-clientES5.js"><\/script>');
    }
    else {
        document.write('<script type="text/javascript" src="scripts/signalr-client.js"><\/script>');
    }
</script>
<!--Add script to update the page and send messages.-->
<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function () {

        var messageInput = document.getElementById('message');

        // Get the user name and store it to prepend to messages.
        var username = prompt('Enter your name:', '');
        // Set initial focus to message input box.
        messageInput.focus();

        var accessToken = '';

        function getAccessToken(url) {
            return new Promise((resolve, reject) => {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, true);
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                xhr.send();
                xhr.onload = () => {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        resolve(xhr.response || xhr.responseText);
                    }
                    else {
                        reject(new Error(xhr.statusText));
                    }
                };

                xhr.onerror = () => {
                    reject(new Error(xhr.statusText));
                }
            });
        }

        getAccessToken('/signalr-auth/chat')
            .then(function (token) {
                accessToken = token;
                return startConnection('http://dev0131a.eastus.cloudapp.azure.com:5001/client/chat/',
                    function (connection) {
                        var messageCallback = function (name, message) {
                            // Html encode display name and message.
                            var encodedName = name;
                            var encodedMsg = message;
                            // Add the message to the page.
                            var liElement = document.createElement('div');
                            liElement.classList.add("message-entry");
                            if (encodedName === "[SYSTEM]") {
                                liElement.innerHTML = encodedMsg;
                                liElement.classList.add("text-center");
                                liElement.classList.add("system-message");
                                liElement.style = "background: #87CEFA;";
                            } else if (encodedName === username) {
                                liElement.innerHTML = '<div class="message-avatar pull-right">' + encodedName + '</div>' +
                                    '<div class="message-content pull-right">' + encodedMsg + '<div>';

                            } else {
                                liElement.innerHTML = '<div class="message-avatar pull-left">' + encodedName + '</div>' +
                                    '<div class="message-content pull-left">' + encodedMsg + '<div>';
                            }
                            var messageBox = document.getElementById('messages');
                            messageBox.appendChild(liElement);
                            messageBox.scrollTop = messageBox.scrollHeight;
                        };
                        // Create a function that the hub can call to broadcast messages.
                        connection.on('broadcastMessage', messageCallback);
                        connection.on('echo', messageCallback);
                    });
            })
            .then(function (connection) {
                console.log('connection started');
                connection.invoke('broadcastMessage', '[SYSTEM]', username + ' JOINED');
                document.getElementById('sendmessage').addEventListener('click', function (event) {
                    // Call the broadcastMessage method on the hub.
                    connection.invoke('broadcastMessage', username, messageInput.value);

                    // Clear text box and reset focus for next comment.
                    messageInput.value = '';
                    messageInput.focus();
                    event.preventDefault();
                });
                document.getElementById('message').addEventListener('keypress', function (event) {
                    if (event.keyCode === 13) {
                        event.preventDefault();
                        document.getElementById('sendmessage').click();
                        return false;
                    }
                });
                document.getElementById('echo').addEventListener('click', function (event) {
                    // Call the echo method on the hub.
                    connection.invoke('echo', username, messageInput.value);

                    // Clear text box and reset focus for next comment.
                    messageInput.value = '';
                    messageInput.focus();
                    event.preventDefault();
                });
            })
            .catch(error => {
                console.error(error.message);
            });

        // Starts a connection with transport fallback - if the connection cannot be started using
        // the webSockets transport the function will fallback to the serverSentEvents transport and
        // if this does not work it will try longPolling. If the connection cannot be started using
        // any of the available transports the function will return a rejected Promise.
        function startConnection(url, configureConnection) {
            return function start(transport) {
                console.log(`Starting connection using ${signalR.TransportType[transport]} transport`);
                var connection = new signalR.HubConnection(url, { transport: transport, uid: username, accessToken: () => accessToken });
                if (configureConnection && typeof configureConnection === 'function') {
                    configureConnection(connection);
                }

                return connection.start()
                    .then(function () {
                        return connection;
                    })
                    .catch(function (error) {
                        console.log(`Cannot start the connection use ${signalR.TransportType[transport]} transport. ${error.message}`);
                        if (transport !== signalR.TransportType.LongPolling) {
                            return start(transport + 1);
                        }

                        return Promise.reject(error);
                    });
            }(signalR.TransportType.WebSockets);
        }
    });
</script>
